
buildscript {
	repositories {
		mavenCentral() // or any other repository where the plugin is hosted
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.6.0"
	id 'org.flywaydb.flyway' version '7.14.0'
}


repositories {
	mavenCentral() // or any other repository where your project's dependencies are hosted
	maven { url "https://packages.confluent.io/maven/" } // Confluent repository
	gradlePluginPortal()
}

ext {
	set('confluentVersion', "7.1.0")
//	set('fakerVersion', "1.0.2")
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


ext {
	set('springCloudVersion', "2021.0.4")
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.4'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.4'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation "io.confluent:kafka-avro-serializer:7.3.3"
//	implementation "com.github.javafaker:javafaker:${fakerVersion}"
//	implementation 'org.springdoc:springdoc-openapi-core:1.6.4'
	implementation 'io.swagger.parser.v3:swagger-parser:2.0.26'
	implementation 'org.projectlombok:lombok:1.18.20'
	implementation 'org.apache.avro:avro:1.11.0'
	runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.80.Final:osx-aarch_64'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.5.4'
//	implementation 'org.flywaydb:flyway-core'
	implementation "org.flywaydb:flyway-core:9.8.1"

//	implementation 'io.github.resilience4j:resilience4j-spring-boot2:2.0.2'
//	implementation 'org.springframework.data:spring-data-jpa'


	compileOnly("org.springframework.boot:spring-boot-devtools")
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
//	testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.2'
	testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0"

	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'


}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


test {
	useJUnitPlatform()
}

sourceSets {
	main {
		java {
			srcDirs 'src/main/avro'
		}
	}
	test {
		java.srcDirs = ['src/test/java/unit', 'src/test/java/component','src/test/java/blackbox']
	}
}



// only  needed to run flywayClean and flywayMigrate separately
//flyway {
//	url = 'jdbc:postgresql://localhost:5432/mydb'
//	user = 'postgres' //  picked from dataSource username and password
//	password = 'password'
//	driver = 'org.postgresql.Driver'
//	baselineOnMigrate = true
//	schemas = ['public']
//	locations = ['filesystem:src/main/resources/db/migration']
//}

task flywayMigrate2(dependsOn: 'flywayMigrate') {  // not required  'flywayMigrate' already exists.
	description = 'Runs Flyway migrations'
}

task cleanBuild(dependsOn: ['clean', 'build', 'flywayMigrate2']) { 
	description = 'Cleans, builds, and runs Flyway migrations'
}
