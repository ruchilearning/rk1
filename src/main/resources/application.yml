
server:
  port: 8090
spring:
#  profiles:
#    default: dev

#  datasource:
#    url: jdbc:mysql://localhost:3306/user
#    username: user
#    password: user
#  jpa:
#    hibernate:
#      ddl-auto: update
#    properties:
#      hibernate:
#        dialect: org.hibernate.dialect.MySQL5Dialect
  datasource:
    url: jdbc:postgresql://localhost:5432/mydb
    username: postgres
    password: password
  jpa:
    hibernate:
      ddl-auto: create
#      ddl-auto: none
    show-sql: true
#  flyway:
#    locations: "classpath:db/migration,filesystem:/opt/migration"

management:
  security:
    enabled: false
  endpoints:
    web:
      exposure:
        include: startup

  kafka:
    bootstrap-servers: localhost:9092 # comma-separated list of broker addresses
    client-id: my-app # an identifier for the client
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer #io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://localhost:8081 # URL of the schema registry
        # any other producer properties can be set here
    consumer:
      group-id: my-group # a unique identifier for the consumer group
      auto-offset-reset: earliest
      enable-auto-commit: true
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer #io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8081 # URL of the schema registry
        # any other consumer properties can be set here


external:
  kafka:
    bootstrap-servers: localhost:9092 # comma-separated list of broker addresses
    client-id: my-app # an identifier for the client
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer #io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://localhost:8081 # URL of the schema registry
    schema-registry:
      url: http://localhost:8081
      subject-name-strategy: topic
      useLatestVersion: true

    consumer:
      group-id: my-group # a unique identifier for the consumer group
      auto-offset-reset: earliest
      enable-auto-commit: true
      key-deserializer: org.apache.kafka.common.serialization.StringSerializer
      value-deserializer: org.apache.kafka.common.serialization.StringSerializer #io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:8081 # URL of the schema registry
        # any other consumer properties can be set here

api-services:
  hello:
    baseUrl: http://localhost:8090
    api1: /api/one
    api2: /api/two


resilience4j:
  circuitbreaker:
    configs:
      kafkaConsumerConfig:
        registerHealthIndicator: true
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
    instances:
      myCircuitBreaker:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 2
        waitDurationInOpenState: 5000
        failureRateThreshold: 50
      kafkaConsumerCircuitBreaker:
        slidingWindowSize: 10
        registerHealthIndicator: true
        failureRateThreshold: 50
        waitDurationInOpenState: 30000
        ringBufferSizeInHalfOpenState: 3
        ringBufferSizeInClosedState: 3
#      kafkaConsumerCircuitBreaker:
#        register-health-indicator: true
#        sliding-window-size: 10
#        sliding-window-type: COUNT_BASED
#        minimum-number-of-calls: 5
#        permitted-number-of-calls-in-half-open-state: 2
#        wait-duration-in-open-state: 5s
#        failure-rate-threshold: 50
#        automatic-transition-from-open-to-half-open-enabled: true
#        ignore-exceptions:
#          - java.io.IOException
#          - java.net.SocketException


  retry:
    instances:
      myRetry:
        maxAttempts: 10
        waitDuration: 100ms
